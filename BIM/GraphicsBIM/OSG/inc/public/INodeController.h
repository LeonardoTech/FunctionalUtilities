////////////
//    created by 孙庆号
////////////

#ifndef __INODE_CONTROLLER_H__
#define __INODE_CONTROLLER_H__
#include <string>
#include <vector>
#include "config.h"
#include "IMeasuringLineLength.h"

namespace bimWorld
{
	//================================INodeController===============================
	/// @brief <节点控制器>
	///
	/// <对该类进行详细描述>
	//================================================================================
	class YIZHU_EXPORT INodeController
	{
	public:
		///////////////// <构件显示控制> ///////////////////

		//===================================hideAll()==================================
		/// @brief <隐藏全部节点>
		///
		/// <隐藏全部节点>
		/// <succ?>
		/// @return <void>
		//================================================================================
		virtual void hideAll() = 0;

		//==================================unHideAll()=================================
		/// @brief <显示全部节点>
		///
		/// <显示全部节点>
		/// <succ?>
		/// @return <void>
		//================================================================================
		virtual void unHideAll() = 0;

		//=====================================hide()=====================================
		/// @brief <隐藏单个节点>
		///
		/// <隐藏单个节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void hide(void *node) = 0;

		//====================================unHide()====================================
		/// @brief <显示单个节点>
		///
		/// <显示单个节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void unHide(void *node) = 0;

		//=====================================hide()=====================================
		/// @brief <隐藏整组节点>
		///
		/// <隐藏整组节点>
		/// <succ?>
		/// @param [in] nodes <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void hide(const std::vector<void*>& nodes) = 0;

		//====================================unHide()====================================
		/// @brief <显示整组节点>
		///
		/// <显示整组节点>
		/// <succ?>
		/// @param [in] nodes <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void unHide(const std::vector<void*>& nodes) = 0;

		//==================================hideOthers()==================================
		/// @brief <隐藏此节点外所有节点>
		///
		/// <隐藏此节点外所有节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void hideOthers(void *node) = 0;

		//=================================unHideOthers()=================================
		/// @brief <显示此节点外所有节点>
		///
		/// <显示此节点外所有节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void unHideOthers(void *node) = 0;

		// <切换隐藏>
		//==================================toggleHide()==================================
		/// @brief <切换隐藏单独节点>
		///
		/// <切换隐藏单独节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void toggleHide(void *node) = 0;

		//==================================toggleHide()==================================
		/// @brief <切换隐藏整组节点>
		///
		/// <切换隐藏整组节点>
		/// <succ?>
		/// @param [in] nodes <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void toggleHide(const std::vector<void*>& nodes) = 0;

		// <判断节点可见性>
		//==================================isVisible()=================================
		/// @brief <判断节点是否可见>
		///
		/// <判断节点是否可见>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <如可见返回True，否则返回False>
		//================================================================================
		virtual bool isVisible(void *node) = 0;

		///////////////////////////////////////节点高亮相关操作//////////////////////////////////////

		//==================================highlight()=================================
		/// @brief <高亮显示节点>
		///
		/// <高亮显示节点>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void highlight(void* node) = 0;

		//=================================unHighlight()================================
		/// @brief <对节点取消高亮显示>
		///
		/// <对节点取消高亮显示>
		/// <succ?>
		/// @param [in] node <节点指针>
		///
		/// @return <void>
		//================================================================================
		virtual void unHighlight(void* node) = 0;

		//================================transparentAll()================================
		/// @brief <使全部节点透明化>
		///
		/// <使全部节点透明化>
		/// <succ?>
		/// @return <void>
		//================================================================================
		virtual void transparentAll() = 0;

		//===============================unTransParentAll()===============================
		/// @brief <取消全部节点透明化>
		///
		/// <取消全部节点透明化>
		/// <succ?>
		/// @return <void>
		//================================================================================
		virtual void unTransParentAll() = 0;

		//virtual void unTransparent(void* node) = 0;

		//=================================getModelRoot()=================================
		/// @brief <获取模型根节点>
		///
		/// <获取模型根节点>
		/// <succ?>
		/// @return <void>
		//================================================================================
		virtual void* getModelRoot() = 0;

		//==============================revertColorOfNode()=============================
		/// @brief <恢复单个节点颜色信息>
		///
		/// <恢复单个节点颜色信息>
		/// 
		/// @param [in] node <节点指针>
		///
		/// @return <如成功恢复返回True，否则返回False>
		//================================================================================
		virtual bool revertColorOfNode(void* node) = 0;

		//==============================revertColorOfNodes()==============================
		/// @brief <恢复整组节点颜色信息>
		///
		/// <恢复单个节点颜色信息>
		///
		/// @param [in] nodes <节点指针>
		///
		/// @return <如成功恢复返回True，否则返回False>
		//================================================================================
		virtual bool revertColorOfNodes(const std::vector<void*>& nodes) = 0;

		//=========================revertStateColorOfConstructs()=========================
		/// @brief <恢复构件的状态颜色>
		///
		/// <恢复构件的状态颜色>
		/// <易混淆>
		/// @param [in] ptr <构建名>
		///
		/// @return <如成功恢复返回True，否则返回False>
		//================================================================================
		virtual bool revertStateColorOfConstructs(void* ptr) = 0;

		//==========================setStateColorToConstructs()=========================
		/// @brief <设置构件的状态颜色>
		/// <易混淆>
		/// <设置构件的状态颜色>
		/// <succ?>
		/// @param [in] ptr <构建名>
		/// @param [in] red <颜色向量R值>
		/// @param [in] green <颜色向量G值>
		/// @param [in] blue <颜色向量B值>
		///
		/// @return <void>
		//================================================================================
		virtual void setStateColorToConstructs(void* ptr, int red, int green, int blue) = 0;

		//=============================measuringLineLength()============================
		/// @brief <测量线长>
		///
		/// <测量线长>
		///
		///
		/// @return <返回IMeasuringLineLength>
		//================================================================================
		virtual IMeasuringLineLength* measuringLineLength() = 0;
	};
}

#endif // __INODE_CONTROLLER_H__